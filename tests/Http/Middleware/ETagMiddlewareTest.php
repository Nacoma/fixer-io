<?php

namespace Tests\Http\Middleware;

use Cache\Adapter\PHPArray\ArrayCachePool;
use GuzzleHttp\Psr7\Response;
use Nacoma\Fixer\Http\Middleware\ETagMiddleware;
use Nyholm\Psr7\Factory\Psr17Factory;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\SimpleCache\InvalidArgumentException;
use Tests\TestCase;

/**
 * @uses \Nacoma\Fixer\ExchangeFactory
 */
class ETagMiddlewareTest extends TestCase
{
    private array $cache;

    private ETagMiddleware $etag;

    private RequestInterface $request;

    /**
     * @test
     * @covers \Nacoma\Fixer\Http\Middleware\ETagMiddleware
     */
    public function saves(): void
    {
        $this->mockHandler->append(
            new Response(200, [
                'ETag' => '123412341234',
                'Date' => 'Mon, 12 Apr 2018 11:30:01 GMT',
            ], 'test1'),
            new Response(304, [
                'ETag' => '123412341234',
                'Date' => 'Mon, 12 Apr 2018 11:30:01 GMT',
            ], 'test2'),
            new Response(200, [
                'ETag' => '123412341234',
                'Date' => 'Mon, 13 Apr 2018 11:30:01 GMT',
            ], 'test2'),
            new Response(304, [
                'ETag' => '123412341234',
                'Date' => 'Mon, 12 Apr 2018 11:30:01 GMT',
            ], 'test1'),
        );

        $this->send($this->request)->assertBody('test1');
        $this->send($this->request)->assertBody('test1');

        $this->assertLastRequestHasHeader('If-None-Match');
        $this->assertLastRequestHasHeader('If-Modified-Since');

        $this->send($this->request)->assertHasHeaders([
            'ETag' => '123412341234',
            'Date' => 'Mon, 13 Apr 2018 11:30:01 GMT',
        ])
            ->assertBody('test2');

        $this->assertLastRequestHasHeader('If-None-Match', '123412341234');
        $this->assertLastRequestHasHeader('If-Modified-Since', 'Mon, 12 Apr 2018 11:30:01 GMT');

        $this->send($this->request);

        $this->assertLastRequestHasHeader('If-None-Match', '123412341234');
        $this->assertLastRequestHasHeader('If-Modified-Since', 'Mon, 13 Apr 2018 11:30:01 GMT');
    }

    /**
     * @test
     * @covers \Nacoma\Fixer\Http\Middleware\ETagMiddleware
     */
    public function storesBodyInCacheWithHeaders(): void
    {
        $this->mockHandler->append(
            new Response(200, [
                'ETag' => '123412341234',
                'Date' => 'Mon, 12 Apr 2018 11:30:01 GMT',
            ], 'test1'),
        );

        $this->send($this->request);

        $this->assertNotEmpty($this->cache);
        $this->assertArrayHasKey('fixer__some-path_what=yes', $this->cache);
        $this->assertEquals('123412341234', $this->cache['fixer__some-path_what=yes'][0][0]['ETag'][0]);
        $this->assertEquals('test1', $this->cache['fixer__some-path_what=yes'][0][3]);
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->cache = [];

        $factory = new Psr17Factory();

        $this->etag = new ETagMiddleware(new ArrayCachePool(null, $this->cache), $factory, $factory);

        $this->request = $factory->createRequest(
            'GET',
            $factory->createUri('localhost')
                ->withPath('some-path')
                ->withQuery('what=yes')
        );
    }

    private function assertLastRequestHasHeader(string $header, ?string $value = null)
    {
        $request = $this->mockHandler->getLastRequest();

        static::assertNotNull($request, 'No last request');
        static::assertArrayHasKey($header, $request->getHeaders(), "The $header header was not present");

        if ($value) {
            $actual = $request->getHeaders()[$header];
            static::assertContains(
                $value,
                $actual,
                <<<TXT
The $header header did not have the expected value:

Expected: $value
Actual: 
TXT
                . json_encode($actual, JSON_PRETTY_PRINT));
        }
    }

    /**
     * @throws ClientExceptionInterface
     * @throws InvalidArgumentException
     */
    private function send(RequestInterface $request): \Tests\Response
    {
        $res = $this->etag->handle($request, function (RequestInterface $request): ResponseInterface {
            return $this->client->sendRequest($request);
        });

        return new \Tests\Response($res);
    }
}
